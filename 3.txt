#A.Loading and preprocessing the image data
import numpy as np
import random
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten

X_train = np.loadtxt("C:/Users/DELL/Desktop/DL/DL/PR 3 DL/input.csv", delimiter = ',')
Y_train = np.loadtxt('C:/Users/DELL/Desktop/DL/DL/PR 3 DL/labels.csv', delimiter = ',')   
X_test =  np.loadtxt('C:/Users/DELL/Desktop/DL/DL/PR 3 DL/input_test.csv', delimiter = ',')
Y_test =  np.loadtxt('C:/Users/DELL/Desktop/DL/DL/PR 3 DL/labels_test.csv', delimiter = ',')

X_train = X_train.reshape(len(X_train), 100, 100, 3)
Y_train = Y_train.reshape(len(Y_train), 1)

X_test =  X_test.reshape(len(X_test), 100, 100, 3)
Y_test =  Y_test.reshape(len(Y_test), 1)

X_train,X_test =X_train/255,X_test/255 

#B.defining the model’s architecture
model = Sequential()

model.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (100, 100, 3)))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
#C.training the model
model.fit(X_train, Y_train, epochs = 5, batch_size = 64)
#D.Estimating the model’s performance
model.evaluate(X_test, Y_test)

#D.Estimating the model’s performance
idx2 = random.randint(0, len(Y_test))
plt.imshow(X_test[idx2, :])
plt.show()

y_pred = model.predict(X_test[idx2, :].reshape(1, 100, 100, 3))
y_pred = y_pred > 0.5

if(y_pred == 0):
    pred = 'dog'
else:
    pred = 'cat'
print("Our model says it is a :", pred)